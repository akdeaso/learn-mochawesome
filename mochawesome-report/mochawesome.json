{
  "stats": {
    "suites": 2,
    "tests": 13,
    "passes": 13,
    "pending": 0,
    "failures": 0,
    "start": "2024-05-01T09:01:46.598Z",
    "end": "2024-05-01T09:01:54.206Z",
    "duration": 7608,
    "testsRegistered": 13,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f391170c-8055-4742-b4c2-3e10d4ef2e95",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "01c0f60f-7f24-4570-8544-6fa912fb5262",
          "title": "Test cases for carts endpoint",
          "fullFile": "E:\\folder\\kuliah stuff\\prodemy qa\\learn-mochawesome\\tests\\carts.spec.js",
          "file": "\\tests\\carts.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return all carts",
              "fullTitle": "Test cases for carts endpoint Should return all carts",
              "timedOut": false,
              "duration": 750,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const res = await api.get(\"/carts\").expect(200);\n  expect(res.body).to.be.jsonSchema(allCartsSchema);\n} catch (err) {\n  console.log(err);\n}",
              "err": {},
              "uuid": "496f4645-bfc8-4f7d-97cd-65a5ea943e52",
              "parentUUID": "01c0f60f-7f24-4570-8544-6fa912fb5262",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return single cart",
              "fullTitle": "Test cases for carts endpoint Should return single cart",
              "timedOut": false,
              "duration": 570,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const res = await api.get(\"/carts/7\").expect(200);\n  expect(res.body).to.be.jsonSchema(singleCartsSchema);\n} catch (err) {\n  console.log(err);\n}",
              "err": {},
              "uuid": "cd3db3c7-89cf-4697-9e62-89ff5bb4335f",
              "parentUUID": "01c0f60f-7f24-4570-8544-6fa912fb5262",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return carts of user",
              "fullTitle": "Test cases for carts endpoint Should return carts of user",
              "timedOut": false,
              "duration": 570,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const res = await api.get(\"/carts/user/5\").expect(200);\n  expect(res.body).to.be.jsonSchema(allCartsSchema);\n} catch (err) {\n  console.log(err);\n}",
              "err": {},
              "uuid": "bd6866bb-b3c7-4f57-9362-e25e46a661c7",
              "parentUUID": "01c0f60f-7f24-4570-8544-6fa912fb5262",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should add new cart",
              "fullTitle": "Test cases for carts endpoint Should add new cart",
              "timedOut": false,
              "duration": 593,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const reqBody = {\n    userId: 1,\n    products: [\n      {\n        id: 7,\n        quantity: 1,\n      },\n      {\n        id: 49,\n        quantity: 2,\n      },\n    ],\n  };\n  const res = await api.post(\"/carts/add\").send(reqBody).expect(200);\n  expect(res.body).to.be.jsonSchema(singleCartsSchema);\n} catch (err) {\n  console.log(err);\n}",
              "err": {},
              "uuid": "a5bd435b-d77a-471d-977b-d7abb705d54c",
              "parentUUID": "01c0f60f-7f24-4570-8544-6fa912fb5262",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should update cart",
              "fullTitle": "Test cases for carts endpoint Should update cart",
              "timedOut": false,
              "duration": 559,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const reqBody = {\n    products: [\n      {\n        id: 7,\n        quantity: 3,\n      },\n    ],\n  };\n  const res = await api.put(\"/carts/9\").send(reqBody).expect(200);\n  expect(res.body).to.be.jsonSchema(singleCartsSchema);\n} catch (err) {\n  console.log(err);\n}",
              "err": {},
              "uuid": "73697cda-8e8e-487b-b7f4-e501fa995641",
              "parentUUID": "01c0f60f-7f24-4570-8544-6fa912fb5262",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should delete cart",
              "fullTitle": "Test cases for carts endpoint Should delete cart",
              "timedOut": false,
              "duration": 572,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const res = await api.delete(\"/carts/10\").expect(200);\n  expect(res.body).to.be.jsonSchema(deleteCartSchema);\n} catch (err) {\n  console.log(err);\n}",
              "err": {},
              "uuid": "1f2cfc3d-4043-478b-abd9-02e5fe5fd40a",
              "parentUUID": "01c0f60f-7f24-4570-8544-6fa912fb5262",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "496f4645-bfc8-4f7d-97cd-65a5ea943e52",
            "cd3db3c7-89cf-4697-9e62-89ff5bb4335f",
            "bd6866bb-b3c7-4f57-9362-e25e46a661c7",
            "a5bd435b-d77a-471d-977b-d7abb705d54c",
            "73697cda-8e8e-487b-b7f4-e501fa995641",
            "1f2cfc3d-4043-478b-abd9-02e5fe5fd40a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3614,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "9741fe8a-cc88-421f-9206-00898d629360",
          "title": "Test cases for recipes endpoint",
          "fullFile": "E:\\folder\\kuliah stuff\\prodemy qa\\learn-mochawesome\\tests\\recipes.spec.js",
          "file": "\\tests\\recipes.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Should return all recipes",
              "fullTitle": "Test cases for recipes endpoint Should return all recipes",
              "timedOut": false,
              "duration": 580,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const res = await api.get(\"/recipes\").expect(200);\n  expect(res.body).to.be.jsonSchema(allRecipesSchema);\n} catch (err) {\n  console.log(err);\n}",
              "err": {},
              "uuid": "9f3e3ec1-f12d-45bf-a85e-89b3790180ec",
              "parentUUID": "9741fe8a-cc88-421f-9206-00898d629360",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return single recipes",
              "fullTitle": "Test cases for recipes endpoint Should return single recipes",
              "timedOut": false,
              "duration": 559,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const res = await api.get(\"/recipes/7\").expect(200);\n  expect(res.body).to.be.jsonSchema(singleRecipesSchema);\n} catch (err) {\n  console.log(err);\n}",
              "err": {},
              "uuid": "0d20cef9-ca45-4dd0-8e3a-2c0a6dff8f40",
              "parentUUID": "9741fe8a-cc88-421f-9206-00898d629360",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return all queried recipes by name",
              "fullTitle": "Test cases for recipes endpoint Should return all queried recipes by name",
              "timedOut": false,
              "duration": 564,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const res = await api.get(\"/recipes/search?q=Margherita\").expect(200);\n  expect(res.body).to.be.jsonSchema(allRecipesSchema);\n} catch (err) {\n  console.log(err);\n}",
              "err": {},
              "uuid": "3122ed2f-88bf-492c-9baa-c54170ea7fe3",
              "parentUUID": "9741fe8a-cc88-421f-9206-00898d629360",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return specific selected data with limit and skip params",
              "fullTitle": "Test cases for recipes endpoint Should return specific selected data with limit and skip params",
              "timedOut": false,
              "duration": 591,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const res = await api\n    .get(\"/recipes?limit=10&skip=10&select=name,image\")\n    .expect(200);\n  expect(res.body).to.be.jsonSchema(limitSkipSchema);\n} catch (err) {\n  console.log(err);\n}",
              "err": {},
              "uuid": "2b266170-f5b5-4f2d-83e5-3b7f1f142bf2",
              "parentUUID": "9741fe8a-cc88-421f-9206-00898d629360",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return all recipes tags",
              "fullTitle": "Test cases for recipes endpoint Should return all recipes tags",
              "timedOut": false,
              "duration": 561,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const res = await api.get(\"/recipes/tags\").expect(200);\n  expect(res.body).to.be.an(\"array\");\n} catch (err) {\n  console.log(err);\n}",
              "err": {},
              "uuid": "05061e55-b4cb-4a08-b1c4-6961c5f86d61",
              "parentUUID": "9741fe8a-cc88-421f-9206-00898d629360",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return all queried recipes by specific tag",
              "fullTitle": "Test cases for recipes endpoint Should return all queried recipes by specific tag",
              "timedOut": false,
              "duration": 565,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const res = await api.get(\"/recipes/tag/Pakistani\").expect(200);\n  expect(res.body).to.be.jsonSchema(allRecipesSchema);\n} catch (err) {\n  console.log(err);\n}",
              "err": {},
              "uuid": "6173c14f-5b61-4240-9b5d-879d8d8127a6",
              "parentUUID": "9741fe8a-cc88-421f-9206-00898d629360",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should return all queried recipes by specific meal type",
              "fullTitle": "Test cases for recipes endpoint Should return all queried recipes by specific meal type",
              "timedOut": false,
              "duration": 557,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n  const res = await api.get(\"/recipes/meal-type/snack\").expect(200);\n  expect(res.body).to.be.jsonSchema(allRecipesSchema);\n} catch (err) {\n  console.log(err);\n}",
              "err": {},
              "uuid": "e6c4907e-69f3-4250-865c-29872f05dfa2",
              "parentUUID": "9741fe8a-cc88-421f-9206-00898d629360",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9f3e3ec1-f12d-45bf-a85e-89b3790180ec",
            "0d20cef9-ca45-4dd0-8e3a-2c0a6dff8f40",
            "3122ed2f-88bf-492c-9baa-c54170ea7fe3",
            "2b266170-f5b5-4f2d-83e5-3b7f1f142bf2",
            "05061e55-b4cb-4a08-b1c4-6961c5f86d61",
            "6173c14f-5b61-4240-9b5d-879d8d8127a6",
            "e6c4907e-69f3-4250-865c-29872f05dfa2"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3977,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.4.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}